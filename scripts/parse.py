import sys
import os

from io import TextIOWrapper
from edn_format import ImmutableDict, Keyword, loads as ednloads, ImmutableList
from pathlib import Path


"""
Generate Go bindings from the cass-config-definitions..
"""
class Generator():
    _target_dir = 'pkg/types/generated'
    _maps = []

    def parse_file(self, filepath: str):
        file = Path(filepath)
        key_name = file.name[:file.name.index('dse') - 1]
        types_name = key_name.replace('-', '_')
        config_file = Path(file).read_text()
        input = ednloads(config_file)

        regexp_prefixes_map = {}
        reverse_map = {}

        if isinstance(input, ImmutableDict):
            props = input.dict.get(Keyword("properties"))
            if isinstance(props, ImmutableDict):
                for k, v in props.dict.items():
                    values: ImmutableDict = v
                    # keyword: Keyword = k
                    edn_type = values.dict.get(Keyword('type'))

                    if edn_type == 'list':
                        # Collection types do not interest us in this reverse operation
                        continue

                    # default_value = values.dict.get(Keyword('default_value'))
                    static_constant = values.dict.get(Keyword('static_constant'))
                    constant = static_constant if static_constant is not None else values.dict.get(Keyword('constant'))

                    # -ea, -agentlib and other special debug params are not interesting in our environment at this point
                    if constant is not None and (constant.startswith('-D') or constant.startswith('-X')):
                        metaVal = {"name": k.name, "edn_type": edn_type}

                        if values.dict.get(Keyword('suppress-equal-sign')):
                            # Special values, such as Xmx, Xss, Xms etc
                            regexp_prefixes_map[constant] = metaVal
                        else:
                            reverse_map[constant] = metaVal


        try:
            os.mkdir(F'{self._target_dir}')
        except FileExistsError:
            pass

        with open(F'{self._target_dir}/{types_name}_generated.go', 'w') as generated:
            self.write_file_header(generated)

            generated.write(F'var {types_name} = map[string]types.Metadata{{\n')
            for k, v in reverse_map.items():
                name = v['name']
                builderType = v['edn_type']
                generated.write(F'"{k}": {{Key: "{name}", BuilderType: "{builderType}"}}, \n')
            generated.write('}\n')

        self._maps.append(key_name)

    def write_file_header(self, writer: TextIOWrapper):
            writer.write("""
            //go:build !ignore_autogenerated
            // +build !ignore_autogenerated
            // Code is generated with scripts/parse.py. DO NOT EDIT.
            package generated

            import(
                    "github.com/burmanm/definitions-parser/pkg/types"
            )

            """)

    def write_finder(self):
        with open(F'{self._target_dir}/finder_generated.go', 'w') as generated:
            self.write_file_header(generated)

            generated.write("var optionsMap = map[string]map[string]types.Metadata{")
            for name in self._maps:
                map_name = name.replace('-', '_')
                generated.write(F'"{name}": {map_name},')

            generated.write("}")


            generated.write("""
            func getOptions(propKey string) map[string]types.Metadata {
                return optionsMap[propKey]
            }
            """)

if __name__ == '__main__':
    gen = Generator()
    cass_definitions_dir = "../cass-config-definitions"
    if len(sys.argv) > 1:
        cass_definitions_dir = sys.argv[1]

    gen.parse_file(F'{cass_definitions_dir}/resources/jvm11-server-options/dse/jvm11-server-options-dse-6.8.0.edn')
    gen.parse_file(F'{cass_definitions_dir}/resources/jvm8-server-options/dse/jvm8-server-options-dse-6.8.0.edn')
    gen.parse_file(F'{cass_definitions_dir}/resources/jvm-server-options/dse/jvm-server-options-dse-6.8.0.edn')
    gen.write_finder()
